//------------------------------------------------------------------------------
///  @file backend_protocall.hpp
///  @brief Class signature to impliment compute backends.
///
///  Defined the function interfaces to access compute resources.
//------------------------------------------------------------------------------

#ifndef backend_protocall_h
#define backend_protocall_h

namespace backend {
//******************************************************************************
//  Data buffer.
//******************************************************************************
//------------------------------------------------------------------------------
///  @brief Class representing a generic buffer.
//------------------------------------------------------------------------------
    class buffer {
    public:
//------------------------------------------------------------------------------
///  @brief Index operator.
//------------------------------------------------------------------------------
        virtual double &operator[] (const size_t index) = 0;

//------------------------------------------------------------------------------
///  @brief Const index operator.
//------------------------------------------------------------------------------
        virtual const double &operator[] (const size_t index) const = 0;

//------------------------------------------------------------------------------
///  @brief Get value at.
//------------------------------------------------------------------------------
        virtual const double at(const size_t index) const = 0;

//------------------------------------------------------------------------------
///  @brief Assign a constant value.
///
///  @param[in] d Scalar data to set.
//------------------------------------------------------------------------------
        virtual void set(const double d) = 0;

//------------------------------------------------------------------------------
///  @brief Get size of the buffer.
//------------------------------------------------------------------------------
        virtual size_t size() const = 0;

//------------------------------------------------------------------------------
///  @brief Get the maximum value from the buffer.
///
///  @returns The maximum value.
//------------------------------------------------------------------------------
        virtual double max() const = 0;

//------------------------------------------------------------------------------
///  @brief Is every element the same.
///
///  @returns Returns true if every element is the same.
//------------------------------------------------------------------------------
        virtual bool is_same() const = 0;

//------------------------------------------------------------------------------
///  @brief Is every element zero.
///
///  @returns Returns true if every element is zero.
//------------------------------------------------------------------------------
        virtual bool is_zero() const = 0;

//------------------------------------------------------------------------------
///  @brief Take sqrt.
//------------------------------------------------------------------------------
        virtual void sqrt() = 0;

//------------------------------------------------------------------------------
///  @brief Take exp.
//------------------------------------------------------------------------------
        virtual void exp() = 0;
    };
}

#endif /* backend_protocall_h */
